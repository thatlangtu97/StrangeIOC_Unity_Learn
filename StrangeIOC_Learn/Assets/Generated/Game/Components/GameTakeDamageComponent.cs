//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    static readonly TakeDamageComponent takeDamage = new TakeDamageComponent();
    public TakeDamageComponent takeDamageComponent 
    { 
        get 
        { 
            return GetComponent(GameComponentsLookup.TakeDamage) as TakeDamageComponent; 
        } 
    }
    public bool hastakeDamageComponent
    { 
        get
        { 
            return HasComponent(GameComponentsLookup.TakeDamage); 
        } 
    }
    public bool isTakeDamage 
    {
        get
        { 
            return HasComponent(GameComponentsLookup.TakeDamage); 
        }
        set 
        {
            if (value != isTakeDamage) 
            {
                var index = GameComponentsLookup.TakeDamage;
                if (value) 
                {
                    var componentPool = GetComponentPool(index);
                    var component = componentPool.Count > 0
                            ? componentPool.Pop()
                            : takeDamageComponent;
                    AddComponent(index, component);
                } 
                else 
                {
                    RemoveComponent(index);
                }
            }
        }
    }
    public void AddTakeDamageComponent(int damage, GameEntity entity, GameEntity entityTakeDamage)
    {
        var index = GameComponentsLookup.TakeDamage;
        //var componentPool = GetComponentPool(index);
        //var component = (componentPool.Count > 0
        //                    ? componentPool.Pop() 
        //                    : CreateComponent(index, typeof(TakeDamageComponent)))as TakeDamageComponent;

        var component = (TakeDamageComponent)CreateComponent(index, typeof(TakeDamageComponent));
        component.damage = damage;
        component.entity = entity;
        component.entityTakeDamage = entityTakeDamage;
        AddComponent(index, component);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherTakeDamage;

    public static Entitas.IMatcher<GameEntity> TakeDamage {
        get {
            if (_matcherTakeDamage == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.TakeDamage);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherTakeDamage = matcher;
            }

            return _matcherTakeDamage;
        }
    }
}
